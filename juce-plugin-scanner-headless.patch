diff --git a/extras/AudioPluginHost/CMakeLists.txt b/extras/AudioPluginHost/CMakeLists.txt
index fb1fb9295..9aa28eb9b 100644
--- a/extras/AudioPluginHost/CMakeLists.txt
+++ b/extras/AudioPluginHost/CMakeLists.txt
@@ -53,7 +53,24 @@ target_compile_definitions(AudioPluginHost PRIVATE
     JUCE_WASAPI=1
     JUCE_WEB_BROWSER=0)
 
+find_package(PkgConfig REQUIRED)
+
+pkg_check_modules(LILV lilv-0)
+pkg_check_modules(SUIL suil-0)
+
+target_include_directories(AudioPluginHost PRIVATE
+    ${LILV_INCLUDE_DIRS}
+    ${SUIL_INCLUDE_DIRS}
+    "../../../../../../external/jlv2/modules")
+
+juce_add_modules(
+    ALIAS_NAMESPACE jlv2
+    ../../../../../../external/jlv2/modules/jlv2_host)
+
 target_link_libraries(AudioPluginHost PRIVATE
+    ${LILV_LIBRARIES}
+    ${SUIL_LIBRARIES}
+    jlv2::jlv2_host
     juce::juce_audio_utils
     juce::juce_cryptography
     juce::juce_dsp
diff --git a/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp b/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp
index dfd4927c8..645d333e7 100644
--- a/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp
+++ b/extras/AudioPluginHost/Source/UI/MainHostWindow.cpp
@@ -26,6 +26,7 @@
 #include <JuceHeader.h>
 #include "MainHostWindow.h"
 #include "../Plugins/InternalPlugins.h"
+#include "jlv2_host/jlv2_host.h"
 
 
 //==============================================================================
@@ -79,6 +80,7 @@ MainHostWindow::MainHostWindow()
 {
     formatManager.addDefaultFormats();
     formatManager.addFormat (new InternalPluginFormat());
+    formatManager.addFormat (new jlv2::LV2PluginFormat());
 
     auto safeThis = SafePointer<MainHostWindow> (this);
     RuntimePermissions::request (RuntimePermissions::recordAudio,
diff --git a/modules/juce_audio_processors/scanning/juce_PluginListComponent.cpp b/modules/juce_audio_processors/scanning/juce_PluginListComponent.cpp
index 28e06a093..6587d309f 100644
--- a/modules/juce_audio_processors/scanning/juce_PluginListComponent.cpp
+++ b/modules/juce_audio_processors/scanning/juce_PluginListComponent.cpp
@@ -399,7 +399,7 @@ public:
 
         // If the filesOrIdentifiersToScan argument isn't empty, we should only scan these
         // If the path is empty, then paths aren't used for this format.
-        if (filesOrIdentifiersToScan.isEmpty() && path.getNumPaths() > 0)
+        if (!owner.headlessScanning && filesOrIdentifiersToScan.isEmpty() && path.getNumPaths() > 0)
         {
            #if ! JUCE_IOS
             if (propertiesToUse != nullptr)
diff --git a/modules/juce_audio_processors/scanning/juce_PluginListComponent.h b/modules/juce_audio_processors/scanning/juce_PluginListComponent.h
index 307f6fd89..758ba1488 100644
--- a/modules/juce_audio_processors/scanning/juce_PluginListComponent.h
+++ b/modules/juce_audio_processors/scanning/juce_PluginListComponent.h
@@ -109,6 +109,9 @@ public:
     */
     TextButton& getOptionsButton()                      { return optionsButton; }
 
+    /* Indicates whether it should perform headless scanning. Headless scanner skips path selection dialog */
+    void setHeadlessScanning (bool isHeadless)          { headlessScanning = isHeadless; }
+
 private:
     //==============================================================================
     AudioPluginFormatManager& formatManager;
@@ -119,6 +122,7 @@ private:
     PropertiesFile* propertiesToUse;
     String dialogTitle, dialogText;
     bool allowAsync;
+    bool headlessScanning;
     int numThreads;
 
     class TableModel;
